/**
 * Configure your app...
 */
(function() {

    "use strict";

    /**
     * All Module configured by Angular
     * Configure All Modules here...
     */
    angular.module('app', ['ngAnimate', 'angular-loading-bar'])
        .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {
            cfpLoadingBarProvider.spinnerTemplate = '<div><span class="fa fa-spinner">Loading...</div>';
            cfpLoadingBarProvider.parentSelector = '#loading-bar-container';

        }]);


}());

/**
 * All Routing
 */
(function() {

    'use strict';

    /**
     * All Routing here...
     * Each Route can resolve some datas before send in controller
     */
    angular.module('app', ['ngRoute' ,'ngMaterial','ngMessages','ngAnimate']).config(function($routeProvider) {
        $routeProvider
            .when('/', {
                templateUrl: 'app/main/main.html',
                controller: 'mainCtrl',
                controllerAs: 'main', // with alias in view for ANgular StyleGuide
                resolve: { // resolve Factory before display view and send by injection in controller
                    users: function(UserFcty) {
                        return UserFcty.all();
                    }
                }
            })
            .when('/contact', {
                templateUrl: 'app/contact/contact.html',
                controller: 'contactCtrl',
                controllerAs: 'contact'
            });
    }).config(function($mdThemingProvider) {

    // Configure a dark theme with primary foreground yellow

    $mdThemingProvider.theme('docs-dark', 'default')
      .primaryPalette('lime')
      .accentPalette('lime')
      .dark();

  });


}());

/**
 * Contact Controller
 */
(function() {

    "use strict";

    angular.module('app').factory('UserFcty', UserFcty);

    UserFcty.$inject = ['$log', '$q', '$http'];


    /**
     * Handler User
     */
    function UserFcty($log, $q, $http) {

        var obj = {
            all: getAll
        };

        return obj;

        /**
         * get All User
         */
        function getAll() {
            var deferred = $q.defer();
            $http.get('data/walkingDeadCharacters.json')
                .success(function(data) {
                    deferred.resolve(data);
                    $log.info('API chargée');
                }).error(deferred.reject);
            return deferred.promise; //return a promise with $q library (not exist in ES5)
        }


    }



}());

/**
 * Filter
 */
(function() {

    "use strict";

    /**
     * 1ere syntaxe
     * Just a filter to render HTML in view
     * @returns
     * */
    angular.module('app').filter("trust", ['$sce', function($sce) {
        return function(htmlCode) {
            return $sce.trustAsHtml(htmlCode);
        }
    }]);


    /**
     * 2eme syntax
     * Filter Website to display link
     */

    angular.module('app').filter('website', website);

    function website() {

        return function(input) {
            var link = "<a href=" + input + ">" + input + "</a>";
            return link;
        }
    }

}());
/**
 * Filter
 */
(function() {

    "use strict";

    angular.module('app').directive("map", map);


    function map() {

        return {
            restrict: 'EA',
            replace: true,
            transclude: true,
            scope: { users: '=users', coords: '=coords' },
            template: '<div id="map"></div>',
            link: function(scope, element, attrs) {
                var map = new google.maps.Map(document.getElementById('map'), {
                    center: scope.coords,
                    zoom: 5
                });

                var lat = 45.758260;
                var long = 4.855387;
                scope.users.forEach(function(element) {

                    var contentString = '<div id="content">' +
                        element.name +
                        '</div>';

                    var infowindow = new google.maps.InfoWindow({
                        content: contentString
                    });


                    lat++; //exemple
                    long++;
                    var marker = new google.maps.Marker({
                        position: { lat: lat, lng: long },
                        map: map,
                        title: element.name
                    });
                    marker.addListener('click', function() {
                        infowindow.open(map, marker);
                    });
                    // To add the marker to the map, call setMap();
                    marker.setMap(map);
                });



            }

        };
    }


}());
/**
 * First Controller
 */
(function () {

    "use strict";

    angular.module('app')
        .controller('mainCtrl', mainCtrl)
        .filter('birthdayShaker', function () {
            // In the return function, we must pass in a single parameter which will be the data we will work on.
            // We have the ability to support multiple other parameters that can be passed into the filter optionally
            return function (input, today) {
/*                console.log("tri en cours");
                console.log(input);
                console.log("today", (today.getMonth() + 2));*/

                input.forEach(function (user) {
                    if (user.naissance.slice(3, 5) == (today.getMonth() + 2)) {
                        console.log("BIRTHDAY");
                        user.isBirthday = true;
                    }
                });
                return input;
            };


        });

    mainCtrl.$inject = ['users', '$mdToast', '$scope'];

    /**
     * Include a Factory: Best Practise
     * Factory Resolving by Routing.
     * Cela signifie que la Factory est chargé avant que la page se charge
     */

    function mainCtrl(users, $mdToast, $scope) {
        var vm = this;
        vm.title = "Hello Angular by StyleGuide";
        vm.users = users;
        vm.idCount = 0;
        vm.items = [1, 2, 3, 4, 5, 6, 7];
        vm.selected = [];
        // Filtering variables
        vm.genderFiltered = {
            sexe: ""
        };
        vm.pseudoFiltered = {
            pseudo: ""
        };
        vm.ageFiltered = 80;
        vm.ageFiltering = function (character) {
            console.log("annee"+character.naissance.slice(6,10));
            return character.naissance.slice(6,10) >= (2016-vm.ageFiltered);
        };
        vm.today = new Date();

        vm.toggle = function (item, list) {
            var idx = list.indexOf(item);
            if (idx > -1) {
                list.splice(idx, 1);
            } else {
                list.push(item);
            }
        };

        vm.exists = function (item, list) {
            return list.indexOf(item) > -1;
        };

        vm.form = {
            id: 0,
            pseudo: "",
            sexe: "",
            photo: "",
            activite: "",
            naissance: "",
            coord: {
                lat: null,
                long: null
            },
            pays: "",
            resume: "",
            saison: [],
            isBirthday: false
        };

        vm.deleteUser = function (user) {
            console.log(user);
            var id = vm.users.indexOf(user);
            vm.users.splice(id, 1);
            // TOAST
            vm.showSimpleToast(user);
        };

        vm.showSimpleToast = function (msg) {
            var pinTo = "top right";
            console.log(pinTo);
            $mdToast.show(
                $mdToast.simple()
                .textContent(msg.pseudo + " has been killed")
                .position(pinTo)
                .hideDelay(3000)
            );
        };

        vm.addCharacter = function () {
            console.log('formulaire envoyé');
            console.log(vm.form);
            vm.users.push({
                id: vm.users.length + 1,
                pseudo: vm.form.pseudo,
                sexe: vm.form.sexe,
                photo: vm.form.photo,
                activite: vm.form.activite,
                naissance: vm.form.naissance.getDate() + "/" + vm.form.naissance.getMonth() + 1 + "/" + vm.form.naissance.getFullYear(),
                coord: vm.form.coord,
                pays: vm.form.pays,
                resume: vm.form.resume,
                saison: vm.form.saison,
                isBirthday: false
            });


            vm.form = {
                id: 0,
                pseudo: "",
                sexe: "",
                photo: "",
                activite: "",
                naissance: "",
                coord: {
                    lat: null,
                    long: null
                },
                pays: "",
                resume: "",
                saison: [],

            };


        };

        /*function evaluateForm() {
            console.log("coucou");
        }

        $scope.$watch('charForm.longitude.$valid', evaluateForm);
*/
    }

}());




/*{
    "$viewValue": null,
    "$modelValue": null,
    "$validators": {},
    "$asyncValidators": {},
    "$parsers": [null],
    "$formatters": [null, null],
    "$viewChangeListeners": [],
    "$untouched": true,
    "$touched": false,
    "$pristine": true,
    "$dirty": false,
    "$valid": false,
    "$invalid": true,
    "$error": {
        "required": true
    },
    "$name": "longitude",
    "$options": null
}*/
//# sourceMappingURL=app.min.js.map
