/**
 * Configure your app...
 */
(function() {

    "use strict";

    /**
     * All Module configured by Angular
     * Configure All Modules here...
     */
    angular.module('app', ['ngAnimate', 'angular-loading-bar'])
        .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {
            cfpLoadingBarProvider.spinnerTemplate = '<div><span class="fa fa-spinner">Loading...</div>';
            cfpLoadingBarProvider.parentSelector = '#loading-bar-container';

        }]);


}());
/**
 * All Routing
 */
(function() {

    'use strict';

    /**
     * All Routing here...
     * Each Route can resolve some datas before send in controller
     */
    angular.module('app', ['ngRoute', 'ngAnimate']).config(function($routeProvider) {
        $routeProvider
            .when('/', {
                templateUrl: 'app/main/main.html',
                controller: 'mainCtrl',
                controllerAs: 'main', // with alias in view for ANgular StyleGuide
                resolve: { // resolve Factory before display view and send by injection in controller
                    users: function(UserFcty) {
                        return UserFcty.all();
                    }
                }
            })
            .when('/contact', {
                templateUrl: 'app/contact/contact.html',
                controller: 'contactCtrl',
                controllerAs: 'contact'
            });
    });


}());
/**
 * Contact Controller
 */
(function() {

    "use strict";

    angular.module('app').factory('UserFcty', UserFcty);

    UserFcty.$inject = ['$log', '$q', '$http'];


    /**
     * Handler User
     */
    function UserFcty($log, $q, $http) {

        var obj = {
            all: getAll
        };

        return obj;

        /**
         * get All User
         */
        function getAll() {
            var deferred = $q.defer();
            $http.get('https://jsonplaceholder.typicode.com/users')
                .success(function(data) {
                    deferred.resolve(data);
                    $log.info('API chargée');
                }).error(deferred.reject);
            return deferred.promise; //return a promise with $q library (not exist in ES5)
        }


    }



}());
/**
 * Filter
 */
(function() {

    "use strict";

    /**
     * 1ere syntaxe
     * Just a filter to render HTML in view
     * @returns
     * */
    angular.module('app').filter("trust", ['$sce', function($sce) {
        return function(htmlCode) {
            return $sce.trustAsHtml(htmlCode);
        }
    }]);


    /**
     * 2eme syntax
     * Filter Website to display link
     */

    angular.module('app').filter('website', website);

    function website() {

        return function(input) {
            var link = "<a href=" + input + ">" + input + "</a>";
            return link;
        }
    }

}());
/**
 * Filter
 */
(function() {

    "use strict";

    angular.module('app').directive("map", map);


    function map() {

        return {
            restrict: 'EA',
            replace: true,
            transclude: true,
            scope: { users: '=users', coords: '=coords' },
            template: '<div id="map"></div>',
            link: function(scope, element, attrs) {
                var map = new google.maps.Map(document.getElementById('map'), {
                    center: scope.coords,
                    zoom: 5
                });

                var lat = 45.758260;
                var long = 4.855387;
                scope.users.forEach(function(element) {

                    var contentString = '<div id="content">' +
                        element.name +
                        '</div>';

                    var infowindow = new google.maps.InfoWindow({
                        content: contentString
                    });


                    lat++; //exemple
                    long++;
                    var marker = new google.maps.Marker({
                        position: { lat: lat, lng: long },
                        map: map,
                        title: element.name
                    });
                    marker.addListener('click', function() {
                        infowindow.open(map, marker);
                    });
                    // To add the marker to the map, call setMap();
                    marker.setMap(map);
                });



            }

        };
    }


}());
/**
 * Another Contact Controller
 */
(function() {

    "use strict";

    angular.module('app').controller('contactCtrl', contactCtrl);

    function contactCtrl() {
        var vm = this;
        vm.submitForm = submitForm;
        vm.title = "Page de Contact";

        // function to submit the form after all validation has occurred            
        function submitForm(isValid) {
            // check to make sure the form is completely valid
            if (isValid) {
                alert('our form is amazing');
            }
        }

    }

}());
/**
 * First Controller
 */
(function() {

    "use strict";

    angular.module('app').controller('mainCtrl', mainCtrl);

    mainCtrl.$inject = ['users'];

    /**
     * Include a Factory: Best Practise
     * Factory Resolving by Routing.
     * Cela signifie que la Factory est chargé avant que la page se charge
     */
    function mainCtrl(users) {
        var vm = this;
        vm.title = "Hello Angular by StyleGuide";
        vm.users = users;
    }

}());
//# sourceMappingURL=app.min.js.map
